<style>
    .filter-wrapper label{
        color:#fff !important;
    }
</style>
<div class="page-content">
    <div class="panel panel-boxed">
        <div class="panel-heading">
            <h3 class="panel-title">Playlist Summary</h3>
        </div>
        <div class="panel-body">
            <div class="">
                <div class="list-wrapper w-full">
                    <div class="table-responsive">
                <table class="table" id="item-list-table">
                    <thead class="table-dark">
                        <tr>
                            <th>MAC Address</th>
                            <th>Is Active</th>
                            <th>Total Playlist URLs</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
        </div>
    </div>
</div>

<!-- Playlist Details Modal -->
<div class="modal fade" id="playlistModal" tabindex="-1" role="dialog" aria-labelledby="playlistModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="playlistModalLabel">
                    Playlists for Device: <span id="modalMacAddress" class="text-primary"></span>
                </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="playlistContent">
                    <div class="text-center">
                        <i class="fa fa-spinner fa-spin fa-2x"></i>
                        <p class="mt-2">Loading playlists...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
</div>

<script>
    var current_tr, current_playlist_id, dataTable, current_button;
    $(document).ready(function () {
        dataTable=$('#item-list-table').DataTable({
            autoFill: false
        });
    })

    var columns = [
        {
            data: 'mac_address', 
            sortable: true,
            render: function(data, type, row) {
                return '<a href="#" class="mac-address-link text-primary" data-mac="' + data + '" style="text-decoration: underline; cursor: pointer;">' + data + '</a>';
            }
        },
        {data: 'is_active', sortable: false},
        {data: 'total_urls', sortable: true},
    ];

    $(document).ready(function () {
        updateDataTable();
    })
    function updateDataTable(){
        dataTable.destroy();
        dataTable=$('#item-list-table').DataTable({
            'processing': true,
            'serverSide': true,
            'serverMethod': 'post',
            "order": [[ 2, "desc" ]],
            autoFill: false,
            pageLength: 50,
            'ajax':{
                url:site_url+"/admin/get-playlist-summary",
                data:{
                },
                "dataSrc": function ( json ) {
                    return json.data;
                }
            },
            'columns': columns,
            select: {
                style: 'multi',  // Allows multiple row selection
                selector: 'td',  // Allows clicking anywhere on the row to select
                info: true      // Shows selected row count in the table info
            },
            dom: 'Bfrtip',      // Adds buttons to the table
            buttons: [
                'selectAll',    // Button to select all rows
                'selectNone',   // Button to deselect all rows
                {
                    text: 'Remove Devices',
                    className: 'btn-danger',
                    action: function () {
                        var selectedData = dataTable.rows({ selected: true }).data();
                        var selectedMacAddresses = [];
                        selectedData.each(function(data) {
                            selectedMacAddresses.push(data.mac_address);
                        });
                        console.log('Selected IPs:', selectedMacAddresses);
                        if (selectedMacAddresses.length > 0) {
                            $.ajax({
                                url: site_url + '/admin/remove-devices',
                                type: 'POST',
                                data: { mac_addresses: selectedMacAddresses },
                                success: function(response) {
                                    console.log('Devices removed:', response);

                                    Toastify({
                                        text: "Devices removed with playlists",
                                    }).showToast();

                                    dataTable.rows({ selected: true }).remove().draw();
                                }
                            });
                        }
                    }
                }
            ],
        });
    }

    // MAC Address click handler and modal functions
    $(document).on('click', '.mac-address-link', function(e) {
        e.preventDefault();
        e.stopPropagation(); // Prevent row selection
        const macAddress = $(this).data('mac');
        showPlaylistsModal(macAddress);
    });

    function showPlaylistsModal(macAddress) {
        $('#modalMacAddress').text(macAddress);
        $('#playlistModal').modal('show');
        
        // Reset content to loading state
        $('#playlistContent').html(`
            <div class="text-center">
                <i class="fa fa-spinner fa-spin fa-2x"></i>
                <p class="mt-2">Loading playlists...</p>
            </div>
        `);
        
        // Load playlists from server
        $.ajax({
            url: site_url + '/admin/get-device-playlists/' + encodeURIComponent(macAddress),
            type: 'GET',
            success: function(response) {
                if (response.success) {
                    let content = '<div class="alert alert-info mb-3">';
                    content += '<div class="row">';
                    content += '<div class="col-md-6">';
                    content += '<strong><i class="fa fa-laptop"></i> Device Information:</strong><br>';
                    content += '<strong>MAC:</strong> ' + response.device.mac_address + '<br>';
                    content += '<strong>App Type:</strong> ' + (response.device.app_type || 'Unknown');
                    content += '</div>';
                    content += '<div class="col-md-6">';
                    content += '<strong>Status:</strong> ' + (response.device.is_active ? 
                        '<span class="badge badge-success">Active</span>' : 
                        '<span class="badge badge-warning">Inactive</span>') + '<br>';
                    content += '<strong>Created:</strong> ' + (response.device.created_at ? 
                        new Date(response.device.created_at).toLocaleDateString() : 'Unknown');
                    content += '</div>';
                    content += '</div>';
                    content += '</div>';
                    
                    if (response.playlists && response.playlists.length > 0) {
                        content += '<h5><i class="fa fa-list"></i> Playlists (' + response.playlists.length + '):</h5>';
                        content += '<div class="table-responsive">';
                        content += '<table class="table table-sm table-striped table-hover">';
                        content += '<thead class="table-dark">';
                        content += '<tr>';
                        content += '<th style="width: 50%;">Playlist URL</th>';
                        content += '<th style="width: 20%;">Created</th>';
                        content += '<th style="width: 20%;">Updated</th>';
                        content += '<th style="width: 10%;">Status</th>';
                        content += '</tr>';
                        content += '</thead>';
                        content += '<tbody>';
                        
                        response.playlists.forEach(function(playlist) {
                            const status = playlist.is_trial === 2 ? 
                                '<span class="badge badge-success">Active</span>' : 
                                '<span class="badge badge-warning">Trial</span>';
                            
                            // Truncate long URLs for display - add null checks
                            let displayUrl = playlist.playlist_url || 'No URL';
                            if (displayUrl && displayUrl.length > 60) {
                                displayUrl = displayUrl.substring(0, 60) + '...';
                            }
                            
                            content += '<tr>';
                            content += '<td>';
                            content += '<small title="' + (playlist.playlist_url || 'No URL') + '">' + displayUrl + '</small>';
                            content += '</td>';
                            content += '<td><small>' + (playlist.created_at ? new Date(playlist.created_at).toLocaleDateString() : 'Unknown') + '</small></td>';
                            content += '<td><small>' + (playlist.updated_at ? new Date(playlist.updated_at).toLocaleDateString() : 'Unknown') + '</small></td>';
                            content += '<td>' + status + '</td>';
                            content += '</tr>';
                        });
                        
                        content += '</tbody></table></div>';
                    } else {
                        content += '<div class="alert alert-warning">';
                        content += '<i class="fa fa-exclamation-triangle"></i> No playlists found for this device.';
                        content += '</div>';
                    }
                    
                    $('#playlistContent').html(content);
                } else {
                    $('#playlistContent').html(`
                        <div class="alert alert-danger">
                            <i class="fa fa-exclamation-circle"></i> ${response.message || 'Error loading device information.'}
                        </div>
                    `);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error loading playlists:', error);
                $('#playlistContent').html(`
                    <div class="alert alert-danger">
                        <i class="fa fa-exclamation-circle"></i> Error loading playlists. Please try again.
                    </div>
                `);
            }
        });
    }

</script>
