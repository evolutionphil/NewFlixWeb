<style>
    .invoice-table {
        width: 100%;
    }
    .invoice-card {
        background: #fff;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .invoice-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .badge-payment {
        padding: 5px 10px;
        border-radius: 3px;
        color: #fff;
        font-size: 12px;
        text-transform: uppercase;
    }
    .badge-paypal { background-color: #0070ba; }
    .badge-stripe { background-color: #635bff; }
    .badge-crypto { background-color: #f7931a; }
    .badge-google_pay { background-color: #4285f4; }
    .badge-app_purchase { background-color: #000; }
    .no-invoices {
        text-align: center;
        padding: 50px;
        color: #999;
    }
    .filter-section {
        background: #fff;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    .filter-section select, .filter-section input {
        margin-right: 10px;
        display: inline-block;
        width: auto;
    }
    .pagination-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 5px;
    }
    .pagination-buttons {
        display: flex;
        gap: 5px;
    }
    .pagination-buttons button {
        padding: 5px 12px;
        border: 1px solid #ddd;
        background: #fff;
        cursor: pointer;
        border-radius: 3px;
    }
    .pagination-buttons button:hover:not(:disabled) {
        background: #007bff;
        color: #fff;
        border-color: #007bff;
    }
    .pagination-buttons button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    .pagination-buttons button.active {
        background: #007bff;
        color: #fff;
        border-color: #007bff;
    }
    .per-page-selector {
        display: flex;
        align-items: center;
        gap: 10px;
    }
</style>

<div class="page-content">
    <div class="panel panel-boxed">
        <div class="panel-heading">
            <h3 class="panel-title">Invoices</h3>
        </div>
        <div class="panel-body">
            <div class="filter-section">
                <div style="display: flex; align-items: center; flex-wrap: wrap; gap: 15px;">
                    <div>
                        <label>Filter by Payment Type:</label>
                        <select id="payment-type-filter" class="form-control" onchange="applyFiltersAndPagination()">
                            <option value="all">All Payment Types</option>
                            <option value="paypal">PayPal</option>
                            <option value="stripe">Stripe</option>
                            <option value="crypto">Cryptocurrency</option>
                            <option value="google_pay">Google Pay</option>
                            <option value="app_purchase">App Purchase</option>
                        </select>
                    </div>
                    <div>
                        <label>Search Transaction ID:</label>
                        <input type="text" id="search-transaction" class="form-control" placeholder="Enter transaction ID" onkeyup="applyFiltersAndPagination()">
                    </div>
                    <div>
                        <label>Items per page:</label>
                        <select id="items-per-page" class="form-control" onchange="applyFiltersAndPagination()">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50" selected>50</option>
                            <option value="100">100</option>
                            <option value="all">All</option>
                        </select>
                    </div>
                </div>
            </div>

            <% if (invoices && invoices.length > 0) { %>
                <div class="table-responsive">
                    <table class="table table-striped invoice-table" id="invoices-table">
                        <thead class="table-dark">
                            <tr>
                                <th>Transaction ID</th>
                                <th>Payment Type</th>
                                <th>Date</th>
                                <th>Created At</th>
                                <th>Size (KB)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% invoices.forEach(function(invoice) { %>
                                <tr data-payment-type="<%= invoice.payment_type %>" data-transaction-id="<%= invoice.transaction_id %>">
                                    <td><strong><%= invoice.transaction_id %></strong></td>
                                    <td>
                                        <span class="badge-payment badge-<%= invoice.payment_type %>">
                                            <%= invoice.payment_type.replace('_', ' ') %>
                                        </span>
                                    </td>
                                    <td><%= invoice.date %></td>
                                    <td><%= new Date(invoice.created_at).toLocaleString() %></td>
                                    <td><%= invoice.file_size %> KB</td>
                                    <td>
                                        <a href="<%= invoice.file_path %>" target="_blank" class="btn btn-sm btn-primary">
                                            <i class="fa fa-eye"></i> View
                                        </a>
                                        <a href="<%= invoice.file_path %>" download class="btn btn-sm btn-success">
                                            <i class="fa fa-download"></i> Download
                                        </a>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
                
                <div class="pagination-controls">
                    <div class="pagination-info">
                        <strong>Total Invoices:</strong> <span id="total-invoices"><%= invoices.length %></span>
                        <span style="margin-left: 20px;" id="filtered-count"></span>
                        <span style="margin-left: 20px;" id="page-info"></span>
                    </div>
                    <div class="pagination-buttons" id="pagination-buttons">
                    </div>
                </div>
            <% } else { %>
                <div class="no-invoices">
                    <i class="fa fa-file-invoice" style="font-size: 48px; margin-bottom: 20px; color: #ccc;"></i>
                    <h4>No Invoices Found</h4>
                    <p>Invoice PDFs will appear here after successful payments.</p>
                    <p style="color: #999; font-size: 14px;">Invoices are stored in: <code>public/receipts/{payment_type}/{YYYY-MM}/{DD}/</code></p>
                </div>
            <% } %>
        </div>
    </div>
</div>

<script>
    let currentPage = 1;
    let filteredRows = [];

    function applyFiltersAndPagination() {
        const paymentTypeFilter = document.getElementById('payment-type-filter').value;
        const searchText = document.getElementById('search-transaction').value.toLowerCase();
        const rows = Array.from(document.querySelectorAll('#invoices-table tbody tr'));
        
        // Filter rows
        filteredRows = rows.filter(row => {
            const paymentType = row.getAttribute('data-payment-type');
            const transactionId = row.getAttribute('data-transaction-id');
            
            // Guard against missing attributes
            if (!transactionId) return false;
            
            const matchesPaymentType = paymentTypeFilter === 'all' || paymentType === paymentTypeFilter;
            const matchesSearch = searchText === '' || transactionId.toLowerCase().includes(searchText);

            return matchesPaymentType && matchesSearch;
        });

        // Reset to page 1 when filters change
        currentPage = 1;
        
        // Display paginated results
        displayPage();
    }

    function displayPage() {
        // Check if pagination elements exist
        const filteredCountEl = document.getElementById('filtered-count');
        const pageInfoEl = document.getElementById('page-info');
        if (!filteredCountEl || !pageInfoEl) return;
        
        const itemsPerPageSelect = document.getElementById('items-per-page').value;
        
        // Handle zero results case
        if (filteredRows.length === 0) {
            const allRows = document.querySelectorAll('#invoices-table tbody tr');
            allRows.forEach(row => row.style.display = 'none');
            
            const totalInvoices = allRows.length;
            filteredCountEl.textContent = 
                totalInvoices > 0 ? `(Filtered: 0 of ${totalInvoices})` : '';
            pageInfoEl.textContent = 'No results found';
            renderPaginationButtons(0);
            return;
        }
        
        const itemsPerPage = itemsPerPageSelect === 'all' ? filteredRows.length : parseInt(itemsPerPageSelect);
        const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
        
        // Hide all rows first
        const allRows = document.querySelectorAll('#invoices-table tbody tr');
        allRows.forEach(row => row.style.display = 'none');
        
        // Calculate pagination range
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredRows.length);
        
        // Show only rows for current page
        for (let i = startIndex; i < endIndex; i++) {
            filteredRows[i].style.display = '';
        }
        
        // Update info text
        const totalInvoices = allRows.length;
        filteredCountEl.textContent = 
            filteredRows.length < totalInvoices ? `(Filtered: ${filteredRows.length} of ${totalInvoices})` : '';
        
        if (itemsPerPageSelect === 'all') {
            pageInfoEl.textContent = 
                filteredRows.length > 0 ? `Showing all ${filteredRows.length} invoices` : '';
        } else {
            pageInfoEl.textContent = 
                filteredRows.length > 0 ? `Showing ${startIndex + 1}-${endIndex} of ${filteredRows.length}` : '';
        }
        
        // Update pagination buttons
        renderPaginationButtons(totalPages);
    }

    function renderPaginationButtons(totalPages) {
        const paginationContainer = document.getElementById('pagination-buttons');
        if (!paginationContainer) return;
        
        paginationContainer.innerHTML = '';
        
        // Handle zero results or single page
        if (totalPages <= 1) return;
        
        // Previous button
        const prevBtn = document.createElement('button');
        prevBtn.textContent = 'Previous';
        prevBtn.disabled = currentPage === 1;
        prevBtn.onclick = () => {
            if (currentPage > 1) {
                currentPage--;
                displayPage();
            }
        };
        paginationContainer.appendChild(prevBtn);
        
        // Page number buttons
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage < maxVisiblePages - 1) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }
        
        if (startPage > 1) {
            const firstBtn = document.createElement('button');
            firstBtn.textContent = '1';
            firstBtn.onclick = () => {
                currentPage = 1;
                displayPage();
            };
            paginationContainer.appendChild(firstBtn);
            
            if (startPage > 2) {
                const dots = document.createElement('button');
                dots.textContent = '...';
                dots.disabled = true;
                paginationContainer.appendChild(dots);
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.textContent = i;
            pageBtn.className = i === currentPage ? 'active' : '';
            pageBtn.onclick = () => {
                currentPage = i;
                displayPage();
            };
            paginationContainer.appendChild(pageBtn);
        }
        
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const dots = document.createElement('button');
                dots.textContent = '...';
                dots.disabled = true;
                paginationContainer.appendChild(dots);
            }
            
            const lastBtn = document.createElement('button');
            lastBtn.textContent = totalPages;
            lastBtn.onclick = () => {
                currentPage = totalPages;
                displayPage();
            };
            paginationContainer.appendChild(lastBtn);
        }
        
        // Next button
        const nextBtn = document.createElement('button');
        nextBtn.textContent = 'Next';
        nextBtn.disabled = currentPage === totalPages;
        nextBtn.onclick = () => {
            if (currentPage < totalPages) {
                currentPage++;
                displayPage();
            }
        };
        paginationContainer.appendChild(nextBtn);
    }

    // Initialize pagination on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Check if invoice table exists before initializing
        const invoiceTable = document.getElementById('invoices-table');
        if (invoiceTable) {
            applyFiltersAndPagination();
        }
    });
</script>
