
<div class="page">
    <div class="page-header">
        <h1 class="page-title">Monitoring Dashboard</h1>
    </div>
    <div class="page-content">
        <!-- Stats Cards Row -->
        <div class="row" id="statsCards">
            <div class="col-lg-3 col-sm-6">
                <div class="card card-block bg-blue-600 p-20">
                    <div class="counter counter-md text-left">
                        <div class="counter-number-group">
                            <span class="counter-number color-white" id="transactions24h">Loading...</span>
                        </div>
                        <div class="counter-label text-uppercase color-white">24h Transactions</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6">
                <div class="card card-block bg-green-600 p-20">
                    <div class="counter counter-md text-left">
                        <div class="counter-number-group">
                            <span class="counter-number color-white" id="totalDevices">Loading...</span>
                        </div>
                        <div class="counter-label text-uppercase color-white">Total Devices</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6">
                <div class="card card-block bg-orange-600 p-20">
                    <div class="counter counter-md text-left">
                        <div class="counter-number-group">
                            <span class="counter-number color-white" id="activeDevices">Loading...</span>
                        </div>
                        <div class="counter-label text-uppercase color-white">Active Devices</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6">
                <div class="card card-block bg-purple-600 p-20">
                    <div class="counter counter-md text-left">
                        <div class="counter-number-group">
                            <span class="counter-number color-white">$</span>
                            <span class="counter-number color-white" id="monthlyRevenue">Loading...</span>
                        </div>
                        <div class="counter-label text-uppercase color-white">Monthly Revenue</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row">
            <!-- Platform Distribution -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Platform Distribution</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="platformChart" height="300"></canvas>
                    </div>
                </div>
            </div>

            <!-- Device Status -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Device Status</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="deviceStatusChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Activity Charts Row -->
        <div class="row">
            <!-- 24h Transaction Activity -->
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">24h Transaction Activity</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="hourlyChart" height="100"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Monthly Revenue Row -->
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Monthly Revenue (Last 6 Months)</h4>
                    </div>
                    <div class="card-body">
                        <canvas id="monthlyRevenueChart" height="100"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Connection Error</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="errorMessage">Unable to load monitoring data. Please refresh the page.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="location.reload()">Refresh Page</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
// Global chart variables
let platformChart, deviceStatusChart, hourlyChart, monthlyRevenueChart;
let socket;
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
    connectSocket();
    loadInitialData();
});

function connectSocket() {
    try {
        socket = io();
        
        socket.on('connect', function() {
            console.log('Connected to monitoring dashboard');
            reconnectAttempts = 0;
        });

        socket.on('monitoringStats', function(data) {
            updateDashboard(data);
        });

        socket.on('disconnect', function() {
            console.log('Disconnected from monitoring dashboard');
            showError('Connection lost. Attempting to reconnect...');
        });

        socket.on('connect_error', function(error) {
            console.error('Connection error:', error);
            reconnectAttempts++;
            if (reconnectAttempts >= maxReconnectAttempts) {
                showError('Unable to connect to server. Please refresh the page.');
            }
        });
    } catch (error) {
        console.error('Socket connection error:', error);
        loadInitialData();
    }
}

function loadInitialData() {
    fetch('/admin/api/monitoring-stats')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            updateDashboard(data);
        })
        .catch(error => {
            console.error('Error loading initial data:', error);
            showError('Failed to load monitoring data: ' + error.message);
            // Set default values
            updateDashboard({
                totalTransactions24h: 0,
                totalDevices: 0,
                activeDevices: 0,
                monthlyRevenue: 0,
                platformDistribution: { android: 0, iOS: 0, samsung: 0, lg: 0, tvOS: 0, other: 0 },
                deviceStatus: { active: 0, trial: 0, inactive: 0 },
                hourlyTransactions: new Array(24).fill(0),
                monthlyRevenueData: { labels: [], data: [] }
            });
        });
}

function updateDashboard(data) {
    try {
        // Update stats cards
        document.getElementById('transactions24h').textContent = data.totalTransactions24h || 0;
        document.getElementById('totalDevices').textContent = data.totalDevices || 0;
        document.getElementById('activeDevices').textContent = data.activeDevices || 0;
        document.getElementById('monthlyRevenue').textContent = (data.monthlyRevenue || 0).toFixed(2);

        // Update charts
        updatePlatformChart(data.platformDistribution || {});
        updateDeviceStatusChart(data.deviceStatus || {});
        updateHourlyChart(data.hourlyTransactions || []);
        updateMonthlyRevenueChart(data.monthlyRevenueData || { labels: [], data: [] });
    } catch (error) {
        console.error('Error updating dashboard:', error);
        showError('Error updating dashboard: ' + error.message);
    }
}

function initializeCharts() {
    // Platform Distribution Chart
    const platformCtx = document.getElementById('platformChart').getContext('2d');
    platformChart = new Chart(platformCtx, {
        type: 'doughnut',
        data: {
            labels: ['Android', 'iOS', 'Samsung', 'LG', 'tvOS', 'Other'],
            datasets: [{
                data: [0, 0, 0, 0, 0, 0],
                backgroundColor: ['#4CAF50', '#2196F3', '#FF9800', '#E91E63', '#9C27B0', '#607D8B']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Device Status Chart
    const statusCtx = document.getElementById('deviceStatusChart').getContext('2d');
    deviceStatusChart = new Chart(statusCtx, {
        type: 'pie',
        data: {
            labels: ['Active', 'Trial', 'Inactive'],
            datasets: [{
                data: [0, 0, 0],
                backgroundColor: ['#4CAF50', '#FF9800', '#F44336']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    // Hourly Activity Chart
    const hourlyCtx = document.getElementById('hourlyChart').getContext('2d');
    hourlyChart = new Chart(hourlyCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => i + ':00'),
            datasets: [{
                label: 'Transactions',
                data: new Array(24).fill(0),
                borderColor: '#2196F3',
                backgroundColor: 'rgba(33, 150, 243, 0.1)',
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Monthly Revenue Chart
    const monthlyCtx = document.getElementById('monthlyRevenueChart').getContext('2d');
    monthlyRevenueChart = new Chart(monthlyCtx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'Revenue ($)',
                data: [],
                backgroundColor: '#4CAF50',
                borderColor: '#45a049',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function updatePlatformChart(data) {
    if (platformChart && data) {
        platformChart.data.datasets[0].data = [
            data.android || 0,
            data.iOS || 0,
            data.samsung || 0,
            data.lg || 0,
            data.tvOS || 0,
            data.other || 0
        ];
        platformChart.update();
    }
}

function updateDeviceStatusChart(data) {
    if (deviceStatusChart && data) {
        deviceStatusChart.data.datasets[0].data = [
            data.active || 0,
            data.trial || 0,
            data.inactive || 0
        ];
        deviceStatusChart.update();
    }
}

function updateHourlyChart(data) {
    if (hourlyChart && data) {
        hourlyChart.data.datasets[0].data = data;
        hourlyChart.update();
    }
}

function updateMonthlyRevenueChart(data) {
    if (monthlyRevenueChart && data) {
        monthlyRevenueChart.data.labels = data.labels || [];
        monthlyRevenueChart.data.datasets[0].data = data.data || [];
        monthlyRevenueChart.update();
    }
}

function showError(message) {
    document.getElementById('errorMessage').textContent = message;
    $('#errorModal').modal('show');
}

// Refresh data every 30 seconds if socket is not connected
setInterval(function() {
    if (!socket || !socket.connected) {
        loadInitialData();
    }
}, 30000);
</script>
