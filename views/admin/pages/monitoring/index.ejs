
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Monitoring Dashboard - Flix IPTV</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0f1419;
            color: #fff;
            overflow-x: hidden;
        }

        .dashboard-header {
            background: linear-gradient(135deg, #1a1f36 0%, #2d3748 100%);
            padding: 2rem;
            border-bottom: 1px solid #2d3748;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .dashboard-title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .dashboard-subtitle {
            color: #a0aec0;
            font-size: 1.1rem;
        }

        .live-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(72, 187, 120, 0.1);
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            border: 1px solid #48bb78;
        }

        .live-dot {
            width: 8px;
            height: 8px;
            background: #48bb78;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.3; }
            100% { opacity: 1; }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            padding: 2rem;
        }

        .stat-card {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            border-radius: 16px;
            padding: 2rem;
            border: 1px solid #4a5568;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .stat-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: #a0aec0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .stat-value {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #fff 0%, #e2e8f0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stat-change {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .positive { color: #48bb78; }
        .negative { color: #f56565; }

        .charts-section {
            padding: 0 2rem 2rem;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            border-radius: 16px;
            padding: 2rem;
            border: 1px solid #4a5568;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .chart-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 2rem;
            color: #e2e8f0;
        }

        .tables-section {
            padding: 0 2rem 2rem;
        }

        .table-card {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            border-radius: 16px;
            border: 1px solid #4a5568;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .table-header {
            padding: 2rem 2rem 1rem;
            border-bottom: 1px solid #4a5568;
        }

        .table-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }

        .table-subtitle {
            color: #a0aec0;
            font-size: 0.9rem;
        }

        .table-container {
            max-height: 500px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #4a5568 #2d3748;
        }

        .table-container::-webkit-scrollbar {
            width: 8px;
        }

        .table-container::-webkit-scrollbar-track {
            background: #2d3748;
        }

        .table-container::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 4px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 1rem 2rem;
            text-align: left;
            border-bottom: 1px solid #4a5568;
        }

        th {
            background: #2d3748;
            font-weight: 600;
            color: #e2e8f0;
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        td {
            color: #cbd5e0;
            font-size: 0.9rem;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-success { background: rgba(72, 187, 120, 0.2); color: #48bb78; }
        .status-error { background: rgba(245, 101, 101, 0.2); color: #f56565; }
        .status-warning { background: rgba(237, 137, 54, 0.2); color: #ed8936; }

        .mac-address {
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
            background: rgba(99, 102, 241, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            color: #818cf8;
        }

        .ip-address {
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
            color: #fbb6ce;
        }

        .endpoint {
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            color: #9ae6b4;
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.25rem 0.5rem;
            border: none;
            border-radius: 4px;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .action-btn.view {
            background: rgba(66, 153, 225, 0.2);
            color: #4299e1;
        }

        .action-btn.block {
            background: rgba(245, 101, 101, 0.2);
            color: #f56565;
        }

        .action-btn:hover {
            transform: scale(1.05);
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #a0aec0;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
            }
            
            .dashboard-title {
                font-size: 2rem;
            }
            
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-header">
        <div class="header-content">
            <div>
                <h1 class="dashboard-title">Live Monitoring Dashboard</h1>
                <p class="dashboard-subtitle">Real-time system monitoring and analytics</p>
            </div>
            <div class="live-indicator">
                <div class="live-dot"></div>
                <span>Live</span>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-header">
                <span class="stat-title">Total Requests</span>
                <div class="stat-icon" style="background: rgba(99, 102, 241, 0.2); color: #6366f1;">
                    <i class="fas fa-chart-line"></i>
                </div>
            </div>
            <div class="stat-value" id="totalRequests">0</div>
            <div class="stat-change positive" id="requestsChange">+0% from yesterday</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <span class="stat-title">Total Devices</span>
                <div class="stat-icon" style="background: rgba(16, 185, 129, 0.2); color: #10b981;">
                    <i class="fas fa-mobile-alt"></i>
                </div>
            </div>
            <div class="stat-value" id="totalDevices">0</div>
            <div class="stat-change positive" id="devicesChange">+0% from yesterday</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <span class="stat-title">Activated Devices</span>
                <div class="stat-icon" style="background: rgba(34, 197, 94, 0.2); color: #22c55e;">
                    <i class="fas fa-check-circle"></i>
                </div>
            </div>
            <div class="stat-value" id="activatedDevices">0</div>
            <div class="stat-change positive" id="activatedChange">+0% from yesterday</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <span class="stat-title">24h Transactions</span>
                <div class="stat-icon" style="background: rgba(245, 158, 11, 0.2); color: #f59e0b;">
                    <i class="fas fa-credit-card"></i>
                </div>
            </div>
            <div class="stat-value" id="dailyTransactions">0</div>
            <div class="stat-change positive" id="transactionsChange">+0% from yesterday</div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
        <div class="charts-grid">
            <div class="chart-card">
                <h3 class="chart-title">Monthly Revenue (Last 6 Months)</h3>
                <canvas id="revenueChart"></canvas>
            </div>
            <div class="chart-card">
                <h3 class="chart-title">Daily Registrations (Last 7 Days)</h3>
                <canvas id="registrationsChart"></canvas>
            </div>
        </div>
        
        <div class="chart-card">
            <h3 class="chart-title">Platform Distribution</h3>
            <canvas id="platformChart"></canvas>
        </div>
    </div>

    <!-- Tables Section -->
    <div class="tables-section">
        <!-- MAC Address API Statistics -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title">MAC Address API Statistics</h3>
                <p class="table-subtitle">Real-time API usage by MAC address</p>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>MAC Address</th>
                            <th>Total Requests</th>
                            <th>IP Addresses</th>
                            <th>First Request</th>
                            <th>Last Request</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="macStatsTable">
                        <tr>
                            <td colspan="6" class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Loading data...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Monitoring Logs -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title">Live Monitoring Logs</h3>
                <p class="table-subtitle">Real-time API requests and responses</p>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>MAC Address</th>
                            <th>Endpoint</th>
                            <th>IP Address</th>
                            <th>User Agent</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="logsTable">
                        <tr>
                            <td colspan="6" class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Waiting for requests...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // Initialize Socket.IO connection
        const socket = io();

        // Initialize charts
        let revenueChart, registrationsChart, platformChart;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadInitialData();
            setupSocketListeners();
        });

        function initializeCharts() {
            // Revenue Chart
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            revenueChart = new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Revenue ($)',
                        data: [],
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: { color: '#e2e8f0' }
                        }
                    },
                    scales: {
                        x: { ticks: { color: '#a0aec0' }, grid: { color: '#4a5568' } },
                        y: { ticks: { color: '#a0aec0' }, grid: { color: '#4a5568' } }
                    }
                }
            });

            // Registrations Chart
            const registrationsCtx = document.getElementById('registrationsChart').getContext('2d');
            registrationsChart = new Chart(registrationsCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'New Registrations',
                        data: [],
                        backgroundColor: 'rgba(16, 185, 129, 0.8)',
                        borderColor: '#10b981',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: { color: '#e2e8f0' }
                        }
                    },
                    scales: {
                        x: { ticks: { color: '#a0aec0' }, grid: { color: '#4a5568' } },
                        y: { ticks: { color: '#a0aec0' }, grid: { color: '#4a5568' } }
                    }
                }
            });

            // Platform Chart
            const platformCtx = document.getElementById('platformChart').getContext('2d');
            platformChart = new Chart(platformCtx, {
                type: 'doughnut',
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        backgroundColor: [
                            '#6366f1',
                            '#10b981',
                            '#f59e0b',
                            '#ef4444',
                            '#8b5cf6'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: { color: '#e2e8f0' }
                        }
                    }
                }
            });
        }

        function loadInitialData() {
            fetch('/admin/monitoring/stats')
                .then(response => response.json())
                .then(data => {
                    updateStats(data);
                    updateCharts(data);
                    updateMacStats(data.macStats);
                })
                .catch(error => console.error('Error loading initial data:', error));
        }

        function setupSocketListeners() {
            // Listen for real-time updates
            socket.on('stats-update', (data) => {
                updateStats(data);
            });

            socket.on('new-request', (logEntry) => {
                addLogEntry(logEntry);
            });

            socket.on('mac-stats-update', (macStats) => {
                updateMacStats(macStats);
            });

            socket.on('charts-update', (data) => {
                updateCharts(data);
            });
        }

        function updateStats(data) {
            document.getElementById('totalRequests').textContent = formatNumber(data.totalRequests || 0);
            document.getElementById('totalDevices').textContent = formatNumber(data.totalDevices || 0);
            document.getElementById('activatedDevices').textContent = formatNumber(data.activatedDevices || 0);
            document.getElementById('dailyTransactions').textContent = formatNumber(data.dailyTransactions || 0);

            // Update change percentages
            document.getElementById('requestsChange').textContent = `${data.requestsChange || '+0'}% from yesterday`;
            document.getElementById('devicesChange').textContent = `${data.devicesChange || '+0'}% from yesterday`;
            document.getElementById('activatedChange').textContent = `${data.activatedChange || '+0'}% from yesterday`;
            document.getElementById('transactionsChange').textContent = `${data.transactionsChange || '+0'}% from yesterday`;
        }

        function updateCharts(data) {
            if (data.revenue) {
                revenueChart.data.labels = data.revenue.labels;
                revenueChart.data.datasets[0].data = data.revenue.data;
                revenueChart.update();
            }

            if (data.registrations) {
                registrationsChart.data.labels = data.registrations.labels;
                registrationsChart.data.datasets[0].data = data.registrations.data;
                registrationsChart.update();
            }

            if (data.platforms) {
                platformChart.data.labels = data.platforms.labels;
                platformChart.data.datasets[0].data = data.platforms.data;
                platformChart.update();
            }
        }

        function updateMacStats(macStats) {
            const tbody = document.getElementById('macStatsTable');
            tbody.innerHTML = '';

            if (!macStats || macStats.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="loading">No data available</td></tr>';
                return;
            }

            macStats.forEach(stat => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span class="mac-address">${stat.macAddress}</span></td>
                    <td>${formatNumber(stat.totalRequests)}</td>
                    <td>${stat.ipCount}</td>
                    <td>${formatDateTime(stat.firstRequest)}</td>
                    <td>${formatDateTime(stat.lastRequest)}</td>
                    <td class="actions">
                        <button class="action-btn view" onclick="viewDetails('${stat.macAddress}')">
                            <i class="fas fa-eye"></i> View
                        </button>
                        <button class="action-btn block" onclick="blockMac('${stat.macAddress}')">
                            <i class="fas fa-ban"></i> Block
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function addLogEntry(logEntry) {
            const tbody = document.getElementById('logsTable');
            
            // Remove loading message if exists
            if (tbody.children.length === 1 && tbody.children[0].cells[0].colSpan === 6) {
                tbody.innerHTML = '';
            }

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${formatDateTime(logEntry.timestamp)}</td>
                <td><span class="mac-address">${logEntry.macAddress || 'N/A'}</span></td>
                <td><span class="endpoint">${logEntry.endpoint}</span></td>
                <td><span class="ip-address">${logEntry.ip}</span></td>
                <td>${truncateText(logEntry.userAgent, 50)}</td>
                <td><span class="status-badge ${getStatusClass(logEntry.status)}">${logEntry.status}</span></td>
            `;

            // Insert at the beginning
            tbody.insertBefore(row, tbody.firstChild);

            // Keep only last 100 entries
            while (tbody.children.length > 100) {
                tbody.removeChild(tbody.lastChild);
            }
        }

        function formatNumber(num) {
            return new Intl.NumberFormat().format(num);
        }

        function formatDateTime(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        function truncateText(text, maxLength) {
            if (!text) return 'N/A';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }

        function getStatusClass(status) {
            if (status >= 200 && status < 300) return 'status-success';
            if (status >= 400 && status < 500) return 'status-warning';
            if (status >= 500) return 'status-error';
            return 'status-success';
        }

        function viewDetails(macAddress) {
            // Open details modal or navigate to details page
            window.open(`/admin/monitoring/mac/${macAddress}`, '_blank');
        }

        function blockMac(macAddress) {
            if (confirm(`Are you sure you want to block MAC address ${macAddress}?`)) {
                fetch('/admin/monitoring/block-mac', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ macAddress })
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert('MAC address blocked successfully');
                        loadInitialData(); // Refresh data
                    } else {
                        alert('Failed to block MAC address');
                    }
                })
                .catch(error => {
                    console.error('Error blocking MAC:', error);
                    alert('Failed to block MAC address');
                });
            }
        }

        // Refresh data every 10 seconds
        setInterval(loadInitialData, 10000);
    </script>
</body>
</html>
